apply from: '../common_java_app.gradle'

repositories {
    mavenCentral() // or jcenter(), or maven { url 'https://custom-repo.com' }
}

dependencies {
    implementation 'org.web3j:crypto:4.9.1'

}

test {
    systemProperty "java.library.path", file("${buildDir}/rust/release").absolutePath
}

task compileRust(type:Exec) {
    workingDir 'src/rust'
    commandLine 'cargo', 'build', '--release', '--target-dir=../../build/rust'
}

compileJava.dependsOn(compileRust)

//jar {
//    from("${buildDir}/rust/release") {
//        into "native/macos"
//        include '*.dylib'
//    }
//    from("${buildDir}/rust/release") {
//        into "native/linux"
//        include '*.so'
//    }
//    from("${buildDir}/rust/release") {
//        into "native/windows"
//        include '*.dll'
//    }
//}


// Copy native libraries to resources
task copyNativeLibs(type: Copy) {
    from("${buildDir}/rust/release") {
        include '*.dll'
        include '*.so'
        include '*.dylib'
    }
    into "${buildDir}/resources/main/native"
}

processResources.dependsOn(copyNativeLibs)

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Set java.library.path for all JavaExec tasks (including test)
tasks.withType(JavaExec) {
    systemProperty "java.library.path", file("${buildDir}/resources/main/native").absolutePath
}

// If you need a specific run task, you can define it like this:
task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'your.main.ClassName' // Replace with your actual main class
    systemProperty "java.library.path", file("${buildDir}/resources/main/native").absolutePath
}

test {
    systemProperty "java.library.path", file("${buildDir}/resources/main/native").absolutePath
}