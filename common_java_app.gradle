apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'

//afterEvaluate {
//    rootProject.tasks.coverageReport.additionalSourceDirs.setFrom rootProject.tasks.coverageReport.additionalSourceDirs.files + files(it.sourceSets.main.allSource.srcDirs)
//    rootProject.tasks.coverageReport.sourceDirectories.setFrom rootProject.tasks.coverageReport.sourceDirectories.files + files(it.sourceSets.main.allSource.srcDirs)
//    rootProject.tasks.coverageReport.classDirectories.setFrom rootProject.tasks.coverageReport.classDirectories.files + files(it.sourceSets.main.output)
//}


tasks.withType(JavaCompile) {
    options.debug = true
}

compileJava {
    sourceCompatibility = 18
    targetCompatibility = 18
}


[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.options.compilerArgs \
        << '-Xlint:unchecked' << '-Xlint:deprecation'

dependencies {
    testImplementation 'org.objenesis:objenesis:3.1'
    testImplementation ('org.spockframework:spock-core:2.4-M4-groovy-4.0') {
        exclude group: 'org.apache.groovy'
    }
    testImplementation "nl.jqno.equalsverifier:equalsverifier:3.15"
    testImplementation 'org.apache.groovy:groovy-all:4.0.18'
    testImplementation 'commons-codec:commons-codec:1.14'
    testImplementation 'cglib:cglib-nodep:3.3.0'

    // Lombok dependency
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    // SLF4J API
    implementation 'org.slf4j:slf4j-api:1.7.32'

    // Logback, a SLF4J implementation
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.6'

}

test {
    jvmArgs '-ea'
    systemProperty "java.library.path", file("${project.rootDir}/polkaj-schnorrkel/build/rust/release").absolutePath
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

//// Must be after sourceSets closure
//jacocoTestReport {
//    dependsOn tasks.test
//
//    //noinspection GroovyAssignabilityCheck
//    sourceSets sourceSets.main
//    reports {
//        html.enabled = true
//        xml.enabled = true
//        csv.enabled = false
//    }
//}
//tasks.check.dependsOn tasks.jacocoTestReport
//rootProject.tasks.coverageReport.dependsOn tasks.test
//test.finalizedBy jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}


//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
    archives sourcesJar
}

jacoco {
    toolVersion = "0.8.12"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Polkadot Java Client'
                description = 'Java client library to access Polkadot based networks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal() // Specifies the local Maven repository
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun=false
    publish=true
    override=true

    publications = ['mavenJava']

    pkg {
        userOrg = 'emerald'
        repo = 'polkaj'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/emeraldpay/polkaj.git'
        labels = ['polkadot', 'blockchain']
        publicDownloadNumbers = true

        version {
            name = project.version
            description = 'PolkaJ ' + project.version
            released  = new Date()
            vcsTag = project.version

            gpg {
                sign = true
            }
        }
    }
}
//
//test {
//    enabled = false
//}

// In your root project's build.gradle

tasks.named('build') {
    dependsOn 'publishToMavenLocal'
}
